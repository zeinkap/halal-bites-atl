generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                    String      @id @default(cuid())
  name                  String
  cuisineType           CuisineType
  address               String
  description           String?
  priceRange            PriceRange
  hasPrayerRoom         Boolean     @default(false)
  hasOutdoorSeating     Boolean     @default(false)
  isZabiha              Boolean     @default(false)
  hasHighChair          Boolean     @default(false)
  servesAlcohol         Boolean     @default(false)
  isFullyHalal          Boolean     @default(false)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  imageUrl              String?
  zabihaBeef            Boolean     @default(false)
  zabihaChicken         Boolean     @default(false)
  zabihaGoat            Boolean     @default(false)
  zabihaLamb            Boolean     @default(false)
  zabihaVerified        DateTime?   @default(now())
  zabihaVerifiedBy      String?
  brandId               String?
  isPartiallyHalal      Boolean     @default(false)
  partiallyHalalBeef    Boolean     @default(false)
  partiallyHalalChicken Boolean     @default(false)
  partiallyHalalGoat    Boolean     @default(false)
  partiallyHalalLamb    Boolean     @default(false)
  latitude              Float?
  longitude             Float?
  comments              Comment[]
  reports               Report[]
  brand                 Brand?      @relation(fields: [brandId], references: [id])

  @@unique([name, address], name: "name_address_unique")
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  rating       Int        @default(5)
  authorName   String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  imageUrl     String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  hearts       Int        @default(0)

  @@index([restaurantId])
}

model Backup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String
  size      Int
  status    String
  error     String?
}

model Report {
  id           String     @id @default(cuid())
  restaurantId String
  details      String
  status       String     @default("pending")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  resolvedAt   DateTime?
  resolvedBy   String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
}

model BugReport {
  id               String   @id @default(cuid())
  title            String
  description      String
  stepsToReproduce String?
  expectedBehavior String?
  actualBehavior   String?
  browser          String?
  device           String?
  email            String?
  screenshotUrl    String?
  createdAt        DateTime @default(now())
  status           String   @default("open")
}

model Brand {
  id          String       @id @default(cuid())
  name        String       @unique
  restaurants Restaurant[]
}

enum CuisineType {
  MIDDLE_EASTERN
  INDIAN_PAKISTANI
  TURKISH
  PERSIAN
  MEDITERRANEAN
  AFGHAN
  CAFE
  OTHER
  MEXICAN
  CHINESE
  THAI
  FAST_FOOD
  KOREAN
  BANGLADESHI
  INDONESIAN
}

enum PriceRange {
  LOW    @map("$")
  MEDIUM @map("$$")
  HIGH   @map("$$$")
}
