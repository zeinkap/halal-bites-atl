generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                String      @id @default(cuid())
  name              String      @unique
  cuisineType       CuisineType
  address           String      @unique
  description       String?
  priceRange        PriceRange
  hasPrayerRoom     Boolean     @default(false)
  hasOutdoorSeating Boolean     @default(false)
  hasHighChair      Boolean     @default(false)
  servesAlcohol     Boolean     @default(false)
  isFullyHalal       Boolean     @default(false)
  isZabiha          Boolean     @default(false)
  isPartiallyHalal   Boolean     @default(false)
  imageUrl          String?
  zabihaChicken     Boolean     @default(false)
  zabihaLamb        Boolean     @default(false)
  zabihaBeef        Boolean     @default(false)
  zabihaGoat        Boolean     @default(false)
  partiallyHalalChicken Boolean   @default(false)
  partiallyHalalLamb   Boolean    @default(false)
  partiallyHalalBeef   Boolean    @default(false)
  partiallyHalalGoat   Boolean    @default(false)
  zabihaVerified    DateTime?   @default(now())
  zabihaVerifiedBy  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  comments          Comment[]
  reports           Report[]
  brandId           String?
  brand             Brand?      @relation(fields: [brandId], references: [id])
  latitude          Float?
  longitude         Float?
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  rating       Int        @default(5)
  authorName   String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  imageUrl     String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
}

model Backup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String
  size      Int
  status    String
  error     String?
}

model Report {
  id           String     @id @default(cuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  details      String
  status       String     @default("pending") // pending, resolved, rejected
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  resolvedAt   DateTime?
  resolvedBy   String?

  @@index([restaurantId])
}

model BugReport {
  id                String   @id @default(cuid())
  title             String
  description       String
  stepsToReproduce  String?
  expectedBehavior  String?
  actualBehavior    String?
  browser           String?
  device            String?
  email             String?
  screenshotUrl     String?
  createdAt         DateTime @default(now())
}

model Brand {
  id          String      @id @default(cuid())
  name        String      @unique
  restaurants Restaurant[]
}

enum CuisineType {
  MIDDLE_EASTERN
  MEDITERRANEAN
  INDIAN_PAKISTANI
  TURKISH
  PERSIAN
  AFGHAN
  CAFE
  CHINESE
  MEXICAN
  THAI
  FAST_FOOD
  KOREAN
  BANGLADESHI
  INDONESIAN
  OTHER
}

enum PriceRange {
  LOW    @map("$")
  MEDIUM @map("$$")
  HIGH   @map("$$$")
}
